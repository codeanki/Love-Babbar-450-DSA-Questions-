A Binary Tree is given.You are suppose to return the the length of the diameter of the tree

Sample Input:
2
2 1 3 4 7 -1 -1 -1 -1 -1 -1
1 2 3 -1 -1 -1 -1
Sample Output:
3
2
/******************SOLUTION************************/


Approach 1: Complexity -O(n^2)
int height(TreeNode<int>*root){
if(root == NULL){
return 0;
}
return max(height(root->left), height(root->right)) + 1;
}


int diameterOfBinaryTree(TreeNode<int>*root){
if(root == NULL){
return 0;
}
int op1 = diameterOfBinaryTree(root->left);
int op2 = diameterOfBinaryTree(root->right);
int op3 = height(root->left) + height(root->right) + 1;
return max(op1, max(op2, op3));
}



Approach 2: Complexity - O(n)
pair<int, int> diaFast(TreeNode<int>*root){
if(root == NULL){
pair<int, int> p = make_pair(0,0);
return p;
pair<int, int> left = diaFast(root->left);
pair<int, int>right = diaFast(root->right);

int op1 = left.first;
int op2 = left.second;
int op3 = left.second + right.second + 1;
pair<int, int> ans;
ans.first = max(op1, max(op2, op3));
ans.second = max(left.second, right.second) + 1;
return ans;
}


int diameterOfBinaryTree(TreeNode<int>*root){
   return diaFast(root).first;
 }
}
